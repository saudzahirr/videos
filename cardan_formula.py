from manim import *

class CubicFormula(Scene):
    def construct(self):
        #LOGO
        circle1 = Circle(radius=1,fill_color=BLUE_A,stroke_color=WHITE,stroke_width=1.3,fill_opacity=0.2)
        title1 = MathTex("\\alpha").scale(4.5)
        name = Text("aljabrak").to_edge(4*DOWN)
        self.play(Create(circle1),Write(title1),Write(name), run_time=5)
        self.wait(2)

        circle2 = Circle(radius=0.25,fill_color=BLUE_A,stroke_color=WHITE,stroke_width=1.3,fill_opacity=0.2).to_edge(0.5*DOWN+0.7*RIGHT)
        title2 = MathTex("\\alpha").to_edge(0.8*DOWN+0.9*RIGHT)
        self.play(Transform(circle1,circle2),Transform(title1,title2),FadeOut(name),run_time=1)

        text1 = Text("You all are familiar with the quadratic equation!"
                    "\n" 
                    "and its formula...").scale(0.7)
        text2 = Text("But do you know there is a formula"
                    "\n"
                    "for cubic equation too!").scale(0.7)
        text3 = Text("Known as Cardan's Formula!").scale(0.7)
        text3[7:23].set_color(BLUE)
        text4 = Text("In this video we will see how to solve a cubic equation.").scale(0.7)
        self.play(Write(text1),run_time=3)
        self.wait(3)
        self.play(ReplacementTransform(text1,text2),run_time=1)
        self.wait(3)
        self.play(ReplacementTransform(text2,text3),run_time=1)
        self.wait(3)
        self.play(ReplacementTransform(text3,text4),run_time=1)
        self.wait(3)
        self.play(FadeOut(text4),run_time=0.3)

        
        eq1 = MathTex("ax^{2} + bx + c = 0").to_edge(DOWN+3.8*LEFT)
        name1 = Text("Quadratic Equation").to_edge(2*DOWN+LEFT).scale(0.5)

        eq2 = MathTex("x^{3} + px + q = 0").to_edge(DOWN+2.8*LEFT)
        name2 = Text("Cubic Equation").to_edge(2*DOWN+LEFT).scale(0.5)

        quadratic = FunctionGraph(
            lambda x : x**2+2*x+1
        )
        quadratic.set_color(YELLOW)

        cubic = FunctionGraph(
            lambda x : x**3-3*x+1
        )
        cubic.set_color(ORANGE)

        grid = NumberPlane()

        self.play(Create(grid))
        self.play(Create(quadratic),Write(eq1),Write(name1), run_time=3)
        self.wait(3)
        self.play(Transform(quadratic,cubic),Transform(eq1,eq2),Transform(name1,name2), run_time=2)
        self.wait(3)
        self.play(FadeOut(grid),FadeOut(quadratic),FadeOut(cubic),FadeOut(eq1),FadeOut(eq2),FadeOut(name1),FadeOut(name2),run_time=0.3)
        self.wait(2)

        history = Text("Gerolamo Cardano, the first mathematician""\n""to use 'negative numbers'.""\n"
                "He published the solution of""\n""a cubic equation of form:"
                ).scale(0.7)
        history[0:16].set_color(BLUE)
        history[41:58].set_color(BLUE)
        cardano = MathTex("x^{3} + px + q = 0").to_edge(5*DOWN)
        ted = MathTex("x = \\sqrt[3]{ -\\frac{ q }{ 2 } + \\sqrt{ {\\frac{ q }{ 4 } }^{2} + {\\frac{ p }{ 27 } }^{3} } } + \\sqrt[3]{ -\\frac{ q }{ 2 } - \\sqrt{ {\\frac{ q }{ 4 } }^{2} + {\\frac{ p }{ 27 } }^{3} } }").to_edge(5*DOWN)
        cardan = ImageMobject("Cardan").to_edge(UP+LEFT)
        self.play(FadeIn(cardan),Write(history),run_time=8)
        self.play(Write(cardano),run_time=3)
        self.wait(2)
        self.play(FadeOut(cardan),FadeOut(history),FadeOut(cardano),run_time=1)
        ted2 = cardano.to_edge(2*UP)
        ted3 = Text("where Cardan's Formula is;").to_edge(5*UP).scale(0.5)
        ted3[5:20].set_color(BLUE)
        self.play(Write(ted2),Write(ted3),Write(ted),run_time=8)
        self.wait(2)
        self.play(FadeOut(ted3),run_time=0.3)
        text5 = Text("See the similarity and symmetry!").scale(0.5).to_edge(5.5*UP).set_color_by_gradient(YELLOW)
        self.play(FadeIn(text5),run_time=1.2)
        self.wait(2)
        quad = MathTex("ax^{2} + bx + c = 0").to_edge(3*UP)
        equa = MathTex("x = \\frac{ -b \\pm \\sqrt{ b^{2} - 4ac } }{2a}").to_edge(5*DOWN)
        self.wait(2)
        self.play(ReplacementTransform(ted2,quad),ReplacementTransform(ted,equa),run_time=1.5)
        self.wait(2)
        ted3 = MathTex("x^{3} + px + q = 0").to_edge(5*DOWN).to_edge(3*UP)
        ted1 = MathTex("x = \\sqrt[3]{ -\\frac{ q }{ 2 } + \\sqrt{ {\\frac{ q }{ 4 } }^{2} + {\\frac{ p }{ 27 } }^{3} } } + \\sqrt[3]{ -\\frac{ q }{ 2 } - \\sqrt{ {\\frac{ q }{ 4 } }^{2} + {\\frac{ p }{ 27 } }^{3} } }").to_edge(5*DOWN)
        self.play(ReplacementTransform(quad,ted3),ReplacementTransform(equa,ted1),run_time=1.5)
        self.wait(3)
        self.play(FadeOut(text5),FadeOut(ted3),FadeOut(ted1))
        text6 = Text("But how we got this... cardan's formula").scale(0.7)
        text7 = Text("let's see how we can scratch this equation:").scale(0.7).next_to(text6,DOWN)
        self.play(Write(text6),run_time=5)
        self.wait(1)
        self.play(Write(text7),run_time=5)
        self.wait(2)
        self.play(FadeOut(text6),FadeOut(text7),run_time=0.5)
        self.wait(2)

        text8 = Text("We all are familiar with the cubic binomial expansion!").scale(0.7)
        self.play(Write(text8),run_time=6)
        self.wait(2)
        binomial = MathTex("(u+v)^{3} = u^{3}+","3u^{2}v+3uv^{2}","+v^{3}").next_to(text8,DOWN).set_color(BLUE)
        self.play(Write(binomial),run_time=4.2)
        self.wait()
        frame = SurroundingRectangle(binomial[1])
        self.play(Create(frame))
        self.wait(2)
        cardan_formula = MathTex("x^{3}" , "+px" , "+q" , "= 0 ").set_color(TEAL_E)
        self.play(ReplacementTransform(text8,cardan_formula),run_time=1.5)
        self.wait()
        self.play(FadeOut(frame),run_time=0.5)
        binomial1 = MathTex("(u+v)^{3} = u^{3}+","3uv(u+v)","+v^{3}").next_to(text8,DOWN).set_color(BLUE)
        self.play(ReplacementTransform(binomial,binomial1),run_time=1.5)
        self.wait(2)
        binomial2 = MathTex("(u+v)^{3}" , "-3uv(u+v)" , "-(u^{3}+v^{3})" , "= 0").next_to(text8,DOWN).set_color(BLUE)
        self.play(ReplacementTransform(binomial1,binomial2),run_time=1.5)
        self.wait(2)

        frame1 = SurroundingRectangle(cardan_formula[1])
        frame2 = SurroundingRectangle(binomial2[1])
        
        self.play(Create(frame1),Create(frame2))
        self.wait(2)
        self.play(FadeOut(frame1),FadeOut(frame2))

        x = MathTex("x = u + v").to_edge(4*UP)
        p = MathTex("uv = -\\frac{p}{3}").to_edge(8*LEFT)
        q = MathTex("u^{3} + v^{3} = -q").to_edge(8*RIGHT)

        self.play(ReplacementTransform(cardan_formula,p),ReplacementTransform(binomial2,q),Write(x))
        frame3 = SurroundingRectangle(x,color=RED)
        self.play(Create(frame3))
        frame4 = SurroundingRectangle(p,color=BLUE)
        self.play(Create(frame4))
        frame5 = SurroundingRectangle(q,color=PINK)
        self.play(Create(frame5))

        self.play(FadeOut(frame3),FadeOut(frame4),FadeOut(frame5),FadeOut(x))

        p1 = MathTex("(uv)^{3} = \\left ( -\\frac{p}{3} \\right )^{3}").to_edge(6*LEFT)
        q1 = MathTex("(u^{3} + v^{3})v^{3} = -q v^{3}").to_edge(6*RIGHT)

        p2 = MathTex("u^{3} v^{3} = -\\frac{ p^{3} }{27}").to_edge(6*LEFT)
        q2 = MathTex("u^{3} v^{3} + (v^{3})^{2} = -q v^{3}").to_edge(6*RIGHT)
        self.play(ReplacementTransform(p,p1),ReplacementTransform(q,q1))
        self.wait(2)
        self.play(ReplacementTransform(p1,p2),ReplacementTransform(q1,q2))
        self.wait(2.5)

        sub = Text("Making simple substitution we get:").scale(0.7).to_edge(UP)
        eqt = MathTex("(v^{3})^{2} + q v^{3} -\\frac{ p^{3} }{27} = 0")
        self.play(FadeOut(p2),run_time=0.1)
        self.play(Write(sub),ReplacementTransform(q2,eqt),run_time=2)
        self.wait(3)
        vcube = MathTex("t=v^{3}").next_to(eqt,RIGHT).set_color(BLUE_E)
        self.play(Write(vcube))
        self.wait(3)
        eqt1 = MathTex("t^{2} + qt -\\frac{ p^{3} }{27} = 0")
        wow = Text("See, we now have a quadratic form:").scale(0.7).to_edge(UP)
        wow[14:27].set_color(BLUE)
        self.play(FadeOut(vcube),ReplacementTransform(eqt,eqt1),ReplacementTransform(sub,wow))
        self.wait(2)
        self.play(FadeOut(wow),run_time=0.1)
        eqt2 = MathTex("t^{2} + qt = \\frac{ p^{3} }{27}")
        eqt3 = MathTex("t^{2} + 2\\left( \\frac{q}{2} \\right)t + \\left( \\frac{q}{2} \\right)^{2} = \\left( \\frac{p}{3} \\right)^{3} + \\left( \\frac{q}{2} \\right)^{2}")
        eqt4 = MathTex("\\left( t + \\frac{q}{2} \\right)^{2} = \\left( \\frac{p}{3} \\right)^{3} + \\left( \\frac{q}{2} \\right)^{2}")
        eqt5 = MathTex("\\left( t_{1,2} + \\frac{q}{2} \\right) = \\pm \\sqrt{ \\left( \\frac{q}{2} \\right)^{2} + \\left( \\frac{p}{3} \\right)^{3} }")
        eqt6 = MathTex("t_{1,2} = - \\frac{q}{2} \\pm \\sqrt{ \\left( \\frac{q}{2} \\right)^{2} + \\left( \\frac{p}{3} \\right)^{3} }")
        eqt7 = MathTex("v_{1,2}^{3} = - \\frac{q}{2} \\pm \\sqrt{ \\left( \\frac{q}{2} \\right)^{2} + \\left( \\frac{p}{3} \\right)^{3} }")
        eqt8 = MathTex("v = \\sqrt[3]{ - \\frac{q}{2} \\pm \\sqrt{ \\left( \\frac{q}{2} \\right)^{2} + \\left( \\frac{p}{3} \\right)^{3} } }")
        also = Text("Also solving we get that:").scale(0.7).to_edge(UP)
        eqt9 = MathTex("u = \\sqrt[3]{ - \\frac{q}{2} \\pm \\sqrt{ \\left( \\frac{q}{2} \\right)^{2} + \\left( \\frac{p}{3} \\right)^{3} } }")
        also1 = Text("We know that;").scale(0.7).to_edge(UP)
        eqt10 = MathTex("x = u + v")
        also2 = Text("since it is obvious that in the + and - combination;" "\n" "we have only two which are:").scale(0.7).to_edge(UP)
        eq_v = MathTex("v = \\sqrt[3]{ - \\frac{q}{2} + \\sqrt{ \\left( \\frac{q}{2} \\right)^{2} + \\left( \\frac{p}{3} \\right)^{3} } }")
        eq_u = MathTex("u = \\sqrt[3]{ - \\frac{q}{2} - \\sqrt{ \\left( \\frac{q}{2} \\right)^{2} + \\left( \\frac{p}{3} \\right)^{3} } }").next_to(eq_v,DOWN)
        final_eq = MathTex("x = \\sqrt[3]{ - \\frac{q}{2} + \\sqrt{ \\left( \\frac{q}{2} \\right)^{2} + \\left( \\frac{p}{3} \\right)^{3} } }"
        "\n"
        " + \\sqrt[3]{ - \\frac{q}{2} - \\sqrt{ \\left( \\frac{q}{2} \\right)^{2} + \\left( \\frac{p}{3} \\right)^{3} } }"
        )
        self.play(ReplacementTransform(eqt1,eqt2),run_time=1)
        self.wait(2)
        self.play(ReplacementTransform(eqt2,eqt3))
        self.wait(2)
        self.play(ReplacementTransform(eqt3,eqt4))
        self.wait(2)
        self.play(ReplacementTransform(eqt4,eqt5))
        self.wait(2)
        self.play(ReplacementTransform(eqt5,eqt6))
        self.wait(2)
        self.play(ReplacementTransform(eqt6,eqt7))
        self.wait(2)
        self.play(ReplacementTransform(eqt7,eqt8))
        self.wait(2)
        self.play(ReplacementTransform(eqt8,eqt9),Write(also))
        self.wait(2)
        self.play(ReplacementTransform(eqt9,eqt10),ReplacementTransform(also,also1))
        self.wait(2)
        self.play(ReplacementTransform(eqt10,eq_v),ReplacementTransform(also1,also2))
        self.play(Write(eq_u))
        self.wait(2)
        text_cardan = Text("Cardan's Equation").to_edge(UP).scale(0.75).set_color(RED)
        self.play(FadeOut(eq_u),FadeOut(also2),run_time=0.1)
        self.play(ReplacementTransform(eq_v,final_eq),Write(text_cardan),run_time=2.5)
        self.wait(2)
        self.play(FadeOut(text_cardan),FadeOut(final_eq))
        disc = Text("Discriminant of Cardan's Formula:").scale(0.7)
        discriminant = MathTex("\\left( \\frac{q}{2} \\right)^{2} + \\left( \\frac{p}{3} \\right)^{3}").next_to(disc,DOWN)
        self.play(Write(disc),Write(discriminant),run_time=2)
        self.wait(3)
        disc1 = Text("Well, what if discriminant is negative?").scale(0.7)
        disc2 = Text("Then, we will enter the realm of complex numbers!").scale(0.7)
        euler_ = MathTex("\\mathbb{C}: z = x + iy").next_to(disc2,DOWN).set_color(TEAL_E)
        euler_form = MathTex("z = r e^{i \\theta}").next_to(disc2,DOWN).set_color(BLUE_B)
        modulus = MathTex("r = |z| = \\sqrt{x^{2}+y^{2}}").next_to(euler_form,LEFT+DOWN).set_color(BLUE_E)
        argument = MathTex("\\theta = \\tan^{-1}\\left(\\frac{y}{x}\\right)").next_to(euler_form,RIGHT+DOWN).set_color(TEAL_E)
        self.play(ReplacementTransform(disc,disc1),run_time=2)
        self.wait(2)
        self.play(ReplacementTransform(disc1,disc2),ReplacementTransform(discriminant,euler_),run_time=1)
        self.wait(2)
        self.play(ReplacementTransform(euler_,euler_form),Write(modulus),Write(argument),run_time=1)
        self.wait(3)
        self.play(FadeOut(euler_form),FadeOut(modulus),FadeOut(argument),FadeOut(disc2))
        self.wait(3)
